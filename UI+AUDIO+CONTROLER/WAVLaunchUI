import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;

public class WAVLaunchUI extends JFrame {
    private static final long SERIAL_VERSION_UID = -1702351704098547978L;

    // Labels to display song title/artist and cover art
    private JLabel titleDashArtist;
    private JLabel coverArtLabel;

    // Slider to seek through the song
    private JSlider songSeekSlider;

    // Buttons for play/pause, song selection, and info display
    private JButton playPauseButton;
    private JButton selectSongButton;
    private JButton infoButton;

    // Label to display current song time
    private JLabel timeLabel;

    // Timer to update the song seek slider and time label
    private Timer timer;
    private int currentTime;  // Current time in seconds

    // AudioManager object to handle audio file operations
    AudioManager AudioFile = new AudioManager();

    // Method to connect an audio file given its path
    public void connect(String inputFilePath) {
    	String fileType = AudioFile.getFileType(inputFilePath);
    	AudioFile.setSong(inputFilePath, fileType);
    }

    // Constructor for the UI
    public WAVLaunchUI() {
        setTitle("Kevin From Accounting");  // Set the window title
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // Exit application on close
        setSize(500, 700);  // Set the window size
        
        // Main panel setup
        JPanel mainPanel = new JPanel();
        mainPanel.setBackground(new java.awt.Color(0, 0, 0, 220));  // Set background color
        mainPanel.setLayout(new BorderLayout());
        mainPanel.setBorder(new EmptyBorder(25, 25, 25, 25));  // Add padding

        // Label for song title and artist
        titleDashArtist = new JLabel("Error");
        titleDashArtist.setForeground(Color.white);  // Set text color
        titleDashArtist.setHorizontalAlignment(SwingConstants.CENTER); // Center text
        titleDashArtist.setFont(new Font("Verdana", Font.BOLD, 20));  // Set font

        // Label for cover art
        coverArtLabel = new JLabel();
        coverArtLabel.setHorizontalAlignment(SwingConstants.CENTER);  // Center image

        // Slider for seeking through the song
        songSeekSlider = new JSlider();
        songSeekSlider.setValue(0);
        songSeekSlider.setMinimum(0);
        songSeekSlider.setPaintTicks(true);
        songSeekSlider.setPaintLabels(true);
        songSeekSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (!songSeekSlider.getValueIsAdjusting()) {
                    int newValue = songSeekSlider.getValue();
                    currentTime = newValue;
                    updateTimerLabel();
                    AudioFile.seek(newValue * 1000);  // Seek to new position in milliseconds
                }
            }
        });

        // Button to select a song
        selectSongButton = new JButton("Select Song");
        selectSongButton.addActionListener(new ActionListener() {
               @Override
               public void actionPerformed(ActionEvent e) {
                   SwingUtilities.invokeLater(new Runnable() {
                       public void run() {

                           new AudioManager().setVisible(true);  // Show AudioManager window
                           AudioFile.stop();  // Stop the current song
                           dispose();  // Close the current window
                       }
                   });
               }
           });

        // Button to play or pause the song
        playPauseButton = new JButton("Play");
        playPauseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (playPauseButton.getText().equals("Play")) {
                	try {
						AudioFile.play();  // Play the song
					} catch (IOException e1) {
						e1.printStackTrace();
					}
                    //System.out.println("SONG IS PLAYING");
                    //add the code that starts the song playing
		    // Check with Dan to see if the comment above has been completed.
                    // It appears that it has.

                    playPauseButton.setText("Pause");  // Change button text to "Pause"
                    int initialTime = songSeekSlider.getValue();
                    int maxTime = songSeekSlider.getMaximum();
                    startTimer(initialTime, maxTime);  // Start the timer
                } else {
                    playPauseButton.setText("Play");  // Change the button text to "Play"
                    try {
						AudioFile.pause();  // Pause the song
					} catch (IOException e1) {
						e1.printStackTrace();
					}
                    //System.out.println("SONG IS PAUSED");
                   //add the code that pauses the song from playing
                    
                    stopTimer();  // Stop timer
                }
            }
        });

	// Button to display song info
        infoButton = new JButton("Info");
        infoButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                displayInfo();  // Show info dialog.
            }
        });

	// Label to display the current time fo the song
        timeLabel = new JLabel("0:00");
        timeLabel.setForeground(Color.black);
        timeLabel.setHorizontalAlignment(SwingConstants.CENTER);

	// Control panel to hold buttons
        JPanel controlPanel = new JPanel(new BorderLayout());
        controlPanel.add(playPauseButton, BorderLayout.EAST);
        controlPanel.add(selectSongButton, BorderLayout.CENTER);
        controlPanel.add(infoButton, BorderLayout.WEST);

	// Bottom panel to hold control panel, slider, and time label
        JPanel bottomPanel = new JPanel(new BorderLayout());
        bottomPanel.add(controlPanel, BorderLayout.NORTH);
        bottomPanel.add(songSeekSlider, BorderLayout.CENTER);
        bottomPanel.add(timeLabel, BorderLayout.SOUTH);

	// Add components to the main panel
        mainPanel.add(titleDashArtist, BorderLayout.NORTH);
        mainPanel.add(coverArtLabel, BorderLayout.CENTER);
        mainPanel.add(bottomPanel, BorderLayout.SOUTH);

	// Add the main panel to the frame
        add(mainPanel);
        setVisible(true);  // Show the window
    }

    // Method to set song information
    public void setSongInfo(String title, String artist, String coverArtLink, int songLength) {
        titleDashArtist.setText(title + " - " + artist);  // Set title and artist text
        songSeekSlider.setMaximum(songLength);  // Set maximum value for slider
        try {
            URL url = new URL(coverArtLink);
            BufferedImage img = ImageIO.read(url);
            Image scaledImage = img.getScaledInstance(300, 300, Image.SCALE_SMOOTH);  // Scale image
            ImageIcon icon = new ImageIcon(scaledImage);
            coverArtLabel.setIcon(icon);  // Set cover art
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Method to display song information in a dialog
    private void displayInfo() {
    	
    	// ADD EXTRA DATA HERE FOR DESCRPTION OR OTHER GARBAGE
	// Delete comment?
    	
        String infoText = "Just make a string to add extra info here";  // Info text to display
        JOptionPane.showMessageDialog(this, infoText, "Information", JOptionPane.INFORMATION_MESSAGE);
    }

    // Method to update the slider and time label
    private void updateSliderTime() {
        int value = songSeekSlider.getValue();
        currentTime = value;
        int minutes = value / 60;
        int seconds = value % 60;
        String timeString = String.format("%d:%02d", minutes, seconds);
        timeLabel.setText(timeString);  // Update time label
    }

    // Method to start the timer for updating song progress
    private void startTimer(int initialTime, int maxTime) {
        currentTime = initialTime;
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (currentTime < maxTime) {
                    currentTime++;
                    updateTimerLabel();
                } else {
                    stopTimer();  // Stop timer when song ends
                }
            }
        });
        timer.start();  // Start the timer
    }

    // Method to stop the timer
    private void stopTimer() {
        if (timer != null) {
            timer.stop();  // Stop the timer if it is running
        }
    }

    // Method to update the time label
    private void updateTimerLabel() {
        int minutes = currentTime / 60;
        int seconds = currentTime % 60;
        String timeString = String.format("%d:%02d", minutes, seconds);
        timeLabel.setText(timeString);  // Update time label with current time
    }
    
}
